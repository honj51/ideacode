//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1433
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.1433 版自动生成。
// 
#pragma warning disable 1591

namespace LiveChatStarterKit.OperatorConsole.LiveChatWS {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OperatorWSSoap", Namespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09")]
    public partial class OperatorWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private AuthenticationHeader authenticationHeaderValueField;
        
        private System.Threading.SendOrPostCallback LogInOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebSiteRequestsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetOperatorStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChatRequestsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveChatRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChatMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsTypingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTypingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOnlineOperatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransferChatOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasNewMessageOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public OperatorWS() {
            this.Url = global::LiveChatStarterKit.OperatorConsole.Properties.Settings.Default.OperatorConsole_LiveChatWS_Operator;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public AuthenticationHeader AuthenticationHeaderValue {
            get {
                return this.authenticationHeaderValueField;
            }
            set {
                this.authenticationHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LogInCompletedEventHandler LogInCompleted;
        
        /// <remarks/>
        public event GetWebSiteRequestsCompletedEventHandler GetWebSiteRequestsCompleted;
        
        /// <remarks/>
        public event SetOperatorStatusCompletedEventHandler SetOperatorStatusCompleted;
        
        /// <remarks/>
        public event GetChatRequestsCompletedEventHandler GetChatRequestsCompleted;
        
        /// <remarks/>
        public event AddMessageCompletedEventHandler AddMessageCompleted;
        
        /// <remarks/>
        public event RemoveChatRequestCompletedEventHandler RemoveChatRequestCompleted;
        
        /// <remarks/>
        public event GetChatMessagesCompletedEventHandler GetChatMessagesCompleted;
        
        /// <remarks/>
        public event IsTypingCompletedEventHandler IsTypingCompleted;
        
        /// <remarks/>
        public event SetTypingCompletedEventHandler SetTypingCompleted;
        
        /// <remarks/>
        public event GetOnlineOperatorCompletedEventHandler GetOnlineOperatorCompleted;
        
        /// <remarks/>
        public event TransferChatCompletedEventHandler TransferChatCompleted;
        
        /// <remarks/>
        public event HasNewMessageCompletedEventHandler HasNewMessageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dominicstpierre.net/LiveChatStarterKit/2007/09/LogIn", RequestNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", ResponseNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Operator LogIn(string userName, string password) {
            object[] results = this.Invoke("LogIn", new object[] {
                        userName,
                        password});
            return ((Operator)(results[0]));
        }
        
        /// <remarks/>
        public void LogInAsync(string userName, string password) {
            this.LogInAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void LogInAsync(string userName, string password, object userState) {
            if ((this.LogInOperationCompleted == null)) {
                this.LogInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogInOperationCompleted);
            }
            this.InvokeAsync("LogIn", new object[] {
                        userName,
                        password}, this.LogInOperationCompleted, userState);
        }
        
        private void OnLogInOperationCompleted(object arg) {
            if ((this.LogInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogInCompleted(this, new LogInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dominicstpierre.net/LiveChatStarterKit/2007/09/GetWebSiteRequests", RequestNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", ResponseNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RequestInfo[] GetWebSiteRequests(int accountId, System.DateTime lastRequestTime) {
            object[] results = this.Invoke("GetWebSiteRequests", new object[] {
                        accountId,
                        lastRequestTime});
            return ((RequestInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWebSiteRequestsAsync(int accountId, System.DateTime lastRequestTime) {
            this.GetWebSiteRequestsAsync(accountId, lastRequestTime, null);
        }
        
        /// <remarks/>
        public void GetWebSiteRequestsAsync(int accountId, System.DateTime lastRequestTime, object userState) {
            if ((this.GetWebSiteRequestsOperationCompleted == null)) {
                this.GetWebSiteRequestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebSiteRequestsOperationCompleted);
            }
            this.InvokeAsync("GetWebSiteRequests", new object[] {
                        accountId,
                        lastRequestTime}, this.GetWebSiteRequestsOperationCompleted, userState);
        }
        
        private void OnGetWebSiteRequestsOperationCompleted(object arg) {
            if ((this.GetWebSiteRequestsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebSiteRequestsCompleted(this, new GetWebSiteRequestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dominicstpierre.net/LiveChatStarterKit/2007/09/SetOperatorStatus", RequestNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", ResponseNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetOperatorStatus(int operatorId, bool isOnline) {
            this.Invoke("SetOperatorStatus", new object[] {
                        operatorId,
                        isOnline});
        }
        
        /// <remarks/>
        public void SetOperatorStatusAsync(int operatorId, bool isOnline) {
            this.SetOperatorStatusAsync(operatorId, isOnline, null);
        }
        
        /// <remarks/>
        public void SetOperatorStatusAsync(int operatorId, bool isOnline, object userState) {
            if ((this.SetOperatorStatusOperationCompleted == null)) {
                this.SetOperatorStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetOperatorStatusOperationCompleted);
            }
            this.InvokeAsync("SetOperatorStatus", new object[] {
                        operatorId,
                        isOnline}, this.SetOperatorStatusOperationCompleted, userState);
        }
        
        private void OnSetOperatorStatusOperationCompleted(object arg) {
            if ((this.SetOperatorStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetOperatorStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dominicstpierre.net/LiveChatStarterKit/2007/09/GetChatRequests", RequestNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", ResponseNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChatRequestInfo[] GetChatRequests(Operator op) {
            object[] results = this.Invoke("GetChatRequests", new object[] {
                        op});
            return ((ChatRequestInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetChatRequestsAsync(Operator op) {
            this.GetChatRequestsAsync(op, null);
        }
        
        /// <remarks/>
        public void GetChatRequestsAsync(Operator op, object userState) {
            if ((this.GetChatRequestsOperationCompleted == null)) {
                this.GetChatRequestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChatRequestsOperationCompleted);
            }
            this.InvokeAsync("GetChatRequests", new object[] {
                        op}, this.GetChatRequestsOperationCompleted, userState);
        }
        
        private void OnGetChatRequestsOperationCompleted(object arg) {
            if ((this.GetChatRequestsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChatRequestsCompleted(this, new GetChatRequestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dominicstpierre.net/LiveChatStarterKit/2007/09/AddMessage", RequestNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", ResponseNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddMessage(ChatMessageInfo msg) {
            this.Invoke("AddMessage", new object[] {
                        msg});
        }
        
        /// <remarks/>
        public void AddMessageAsync(ChatMessageInfo msg) {
            this.AddMessageAsync(msg, null);
        }
        
        /// <remarks/>
        public void AddMessageAsync(ChatMessageInfo msg, object userState) {
            if ((this.AddMessageOperationCompleted == null)) {
                this.AddMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMessageOperationCompleted);
            }
            this.InvokeAsync("AddMessage", new object[] {
                        msg}, this.AddMessageOperationCompleted, userState);
        }
        
        private void OnAddMessageOperationCompleted(object arg) {
            if ((this.AddMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dominicstpierre.net/LiveChatStarterKit/2007/09/RemoveChatRequest", RequestNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", ResponseNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveChatRequest(ChatRequestInfo req) {
            this.Invoke("RemoveChatRequest", new object[] {
                        req});
        }
        
        /// <remarks/>
        public void RemoveChatRequestAsync(ChatRequestInfo req) {
            this.RemoveChatRequestAsync(req, null);
        }
        
        /// <remarks/>
        public void RemoveChatRequestAsync(ChatRequestInfo req, object userState) {
            if ((this.RemoveChatRequestOperationCompleted == null)) {
                this.RemoveChatRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveChatRequestOperationCompleted);
            }
            this.InvokeAsync("RemoveChatRequest", new object[] {
                        req}, this.RemoveChatRequestOperationCompleted, userState);
        }
        
        private void OnRemoveChatRequestOperationCompleted(object arg) {
            if ((this.RemoveChatRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveChatRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dominicstpierre.net/LiveChatStarterKit/2007/09/GetChatMessages", RequestNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", ResponseNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChatMessageInfo[] GetChatMessages(string chatId, long lastCheck) {
            object[] results = this.Invoke("GetChatMessages", new object[] {
                        chatId,
                        lastCheck});
            return ((ChatMessageInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetChatMessagesAsync(string chatId, long lastCheck) {
            this.GetChatMessagesAsync(chatId, lastCheck, null);
        }
        
        /// <remarks/>
        public void GetChatMessagesAsync(string chatId, long lastCheck, object userState) {
            if ((this.GetChatMessagesOperationCompleted == null)) {
                this.GetChatMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChatMessagesOperationCompleted);
            }
            this.InvokeAsync("GetChatMessages", new object[] {
                        chatId,
                        lastCheck}, this.GetChatMessagesOperationCompleted, userState);
        }
        
        private void OnGetChatMessagesOperationCompleted(object arg) {
            if ((this.GetChatMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChatMessagesCompleted(this, new GetChatMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dominicstpierre.net/LiveChatStarterKit/2007/09/IsTyping", RequestNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", ResponseNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsTyping(string chatId, bool isOperator) {
            object[] results = this.Invoke("IsTyping", new object[] {
                        chatId,
                        isOperator});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsTypingAsync(string chatId, bool isOperator) {
            this.IsTypingAsync(chatId, isOperator, null);
        }
        
        /// <remarks/>
        public void IsTypingAsync(string chatId, bool isOperator, object userState) {
            if ((this.IsTypingOperationCompleted == null)) {
                this.IsTypingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsTypingOperationCompleted);
            }
            this.InvokeAsync("IsTyping", new object[] {
                        chatId,
                        isOperator}, this.IsTypingOperationCompleted, userState);
        }
        
        private void OnIsTypingOperationCompleted(object arg) {
            if ((this.IsTypingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsTypingCompleted(this, new IsTypingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dominicstpierre.net/LiveChatStarterKit/2007/09/SetTyping", RequestNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", ResponseNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetTyping(string chatId, bool isOperator, bool typing) {
            this.Invoke("SetTyping", new object[] {
                        chatId,
                        isOperator,
                        typing});
        }
        
        /// <remarks/>
        public void SetTypingAsync(string chatId, bool isOperator, bool typing) {
            this.SetTypingAsync(chatId, isOperator, typing, null);
        }
        
        /// <remarks/>
        public void SetTypingAsync(string chatId, bool isOperator, bool typing, object userState) {
            if ((this.SetTypingOperationCompleted == null)) {
                this.SetTypingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTypingOperationCompleted);
            }
            this.InvokeAsync("SetTyping", new object[] {
                        chatId,
                        isOperator,
                        typing}, this.SetTypingOperationCompleted, userState);
        }
        
        private void OnSetTypingOperationCompleted(object arg) {
            if ((this.SetTypingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTypingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dominicstpierre.net/LiveChatStarterKit/2007/09/GetOnlineOperator", RequestNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", ResponseNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Operator[] GetOnlineOperator() {
            object[] results = this.Invoke("GetOnlineOperator", new object[0]);
            return ((Operator[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOnlineOperatorAsync() {
            this.GetOnlineOperatorAsync(null);
        }
        
        /// <remarks/>
        public void GetOnlineOperatorAsync(object userState) {
            if ((this.GetOnlineOperatorOperationCompleted == null)) {
                this.GetOnlineOperatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOnlineOperatorOperationCompleted);
            }
            this.InvokeAsync("GetOnlineOperator", new object[0], this.GetOnlineOperatorOperationCompleted, userState);
        }
        
        private void OnGetOnlineOperatorOperationCompleted(object arg) {
            if ((this.GetOnlineOperatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOnlineOperatorCompleted(this, new GetOnlineOperatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dominicstpierre.net/LiveChatStarterKit/2007/09/TransferChat", RequestNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", ResponseNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TransferChat(ChatRequestInfo chatRequest) {
            this.Invoke("TransferChat", new object[] {
                        chatRequest});
        }
        
        /// <remarks/>
        public void TransferChatAsync(ChatRequestInfo chatRequest) {
            this.TransferChatAsync(chatRequest, null);
        }
        
        /// <remarks/>
        public void TransferChatAsync(ChatRequestInfo chatRequest, object userState) {
            if ((this.TransferChatOperationCompleted == null)) {
                this.TransferChatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferChatOperationCompleted);
            }
            this.InvokeAsync("TransferChat", new object[] {
                        chatRequest}, this.TransferChatOperationCompleted, userState);
        }
        
        private void OnTransferChatOperationCompleted(object arg) {
            if ((this.TransferChatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferChatCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dominicstpierre.net/LiveChatStarterKit/2007/09/HasNewMessage", RequestNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", ResponseNamespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasNewMessage(string chatId, long lastMessageId) {
            object[] results = this.Invoke("HasNewMessage", new object[] {
                        chatId,
                        lastMessageId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasNewMessageAsync(string chatId, long lastMessageId) {
            this.HasNewMessageAsync(chatId, lastMessageId, null);
        }
        
        /// <remarks/>
        public void HasNewMessageAsync(string chatId, long lastMessageId, object userState) {
            if ((this.HasNewMessageOperationCompleted == null)) {
                this.HasNewMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasNewMessageOperationCompleted);
            }
            this.InvokeAsync("HasNewMessage", new object[] {
                        chatId,
                        lastMessageId}, this.HasNewMessageOperationCompleted, userState);
        }
        
        private void OnHasNewMessageOperationCompleted(object arg) {
            if ((this.HasNewMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasNewMessageCompleted(this, new HasNewMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09", IsNullable=false)]
    public partial class AuthenticationHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string userNameField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09")]
    public partial class ChatMessageInfo {
        
        private long messageIdField;
        
        private string chatIdField;
        
        private string nameField;
        
        private long sentDateField;
        
        private string messageField;
        
        /// <remarks/>
        public long MessageId {
            get {
                return this.messageIdField;
            }
            set {
                this.messageIdField = value;
            }
        }
        
        /// <remarks/>
        public string ChatId {
            get {
                return this.chatIdField;
            }
            set {
                this.chatIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public long SentDate {
            get {
                return this.sentDateField;
            }
            set {
                this.sentDateField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09")]
    public partial class ChatRequestInfo {
        
        private string chatIdField;
        
        private System.DateTime requestDateField;
        
        private string visitorIPField;
        
        private string visitorNameField;
        
        private string visitorEmailField;
        
        private string visitorUserAgentField;
        
        private bool wasAcceptField;
        
        private System.DateTime acceptDateField;
        
        private int acceptByOpereratorIdField;
        
        private System.DateTime closedDateField;
        
        /// <remarks/>
        public string ChatId {
            get {
                return this.chatIdField;
            }
            set {
                this.chatIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime RequestDate {
            get {
                return this.requestDateField;
            }
            set {
                this.requestDateField = value;
            }
        }
        
        /// <remarks/>
        public string VisitorIP {
            get {
                return this.visitorIPField;
            }
            set {
                this.visitorIPField = value;
            }
        }
        
        /// <remarks/>
        public string VisitorName {
            get {
                return this.visitorNameField;
            }
            set {
                this.visitorNameField = value;
            }
        }
        
        /// <remarks/>
        public string VisitorEmail {
            get {
                return this.visitorEmailField;
            }
            set {
                this.visitorEmailField = value;
            }
        }
        
        /// <remarks/>
        public string VisitorUserAgent {
            get {
                return this.visitorUserAgentField;
            }
            set {
                this.visitorUserAgentField = value;
            }
        }
        
        /// <remarks/>
        public bool WasAccept {
            get {
                return this.wasAcceptField;
            }
            set {
                this.wasAcceptField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime AcceptDate {
            get {
                return this.acceptDateField;
            }
            set {
                this.acceptDateField = value;
            }
        }
        
        /// <remarks/>
        public int AcceptByOpereratorId {
            get {
                return this.acceptByOpereratorIdField;
            }
            set {
                this.acceptByOpereratorIdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ClosedDate {
            get {
                return this.closedDateField;
            }
            set {
                this.closedDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09")]
    public partial class RequestInfo {
        
        private int accoutIdField;
        
        private int requestIdField;
        
        private string pageRequestedField;
        
        private string domainRequestedField;
        
        private System.DateTime requestTimeField;
        
        private string referrerField;
        
        private string visitorUserAgentField;
        
        private string visitorIPField;
        
        /// <remarks/>
        public int AccoutId {
            get {
                return this.accoutIdField;
            }
            set {
                this.accoutIdField = value;
            }
        }
        
        /// <remarks/>
        public int RequestId {
            get {
                return this.requestIdField;
            }
            set {
                this.requestIdField = value;
            }
        }
        
        /// <remarks/>
        public string PageRequested {
            get {
                return this.pageRequestedField;
            }
            set {
                this.pageRequestedField = value;
            }
        }
        
        /// <remarks/>
        public string DomainRequested {
            get {
                return this.domainRequestedField;
            }
            set {
                this.domainRequestedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime RequestTime {
            get {
                return this.requestTimeField;
            }
            set {
                this.requestTimeField = value;
            }
        }
        
        /// <remarks/>
        public string Referrer {
            get {
                return this.referrerField;
            }
            set {
                this.referrerField = value;
            }
        }
        
        /// <remarks/>
        public string VisitorUserAgent {
            get {
                return this.visitorUserAgentField;
            }
            set {
                this.visitorUserAgentField = value;
            }
        }
        
        /// <remarks/>
        public string VisitorIP {
            get {
                return this.visitorIPField;
            }
            set {
                this.visitorIPField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.dominicstpierre.net/LiveChatStarterKit/2007/09")]
    public partial class Operator {
        
        private bool disabledField;
        
        private int idField;
        
        private int accountIdField;
        
        private string nameField;
        
        private string passwordField;
        
        private string emailField;
        
        private bool isOnlineField;
        
        /// <remarks/>
        public bool Disabled {
            get {
                return this.disabledField;
            }
            set {
                this.disabledField = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int AccountId {
            get {
                return this.accountIdField;
            }
            set {
                this.accountIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public bool IsOnline {
            get {
                return this.isOnlineField;
            }
            set {
                this.isOnlineField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void LogInCompletedEventHandler(object sender, LogInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Operator Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Operator)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetWebSiteRequestsCompletedEventHandler(object sender, GetWebSiteRequestsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebSiteRequestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebSiteRequestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RequestInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RequestInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SetOperatorStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetChatRequestsCompletedEventHandler(object sender, GetChatRequestsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChatRequestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChatRequestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChatRequestInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChatRequestInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void AddMessageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RemoveChatRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetChatMessagesCompletedEventHandler(object sender, GetChatMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChatMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChatMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChatMessageInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChatMessageInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void IsTypingCompletedEventHandler(object sender, IsTypingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsTypingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsTypingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SetTypingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetOnlineOperatorCompletedEventHandler(object sender, GetOnlineOperatorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOnlineOperatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOnlineOperatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Operator[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Operator[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void TransferChatCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void HasNewMessageCompletedEventHandler(object sender, HasNewMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasNewMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasNewMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591