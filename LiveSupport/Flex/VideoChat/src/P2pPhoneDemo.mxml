<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" paddingLeft="5" paddingRight="5" width="501" height="738">
<mx:Script>
	<![CDATA[
		import mx.core.UIComponent;
		import mx.controls.Alert;
	
		//链接Adobe stratus 服务器
		private const StratusAddress:String = "rtmfp://stratus.adobe.com";
	    
	    //Developer Key,如果没有请根据Flex 迷你教程 -- 基于Stratus的P2P网络电话 (1)中的提示申请
	    private const DeveloperKey:String = "1710124cbf69e3f25b780c13-d6cbf2cb35a1";
	    
	    //我们需要一个nectConnetion与stratus 服务器链接
	    private var netConnection:NetConnection;
	    
	    //用于对外发布自己的身份信息流
	    private var myStream:NetStream;
	    
	    //用于链接后对外发布自己的信息流，比如音频，视频，文字
	    private var outgoingStream:NetStream;
	    
	    //进入的信息流，这个流对应呼叫者的outgoingStream，用这个流尝试播放发布者发布的信息，比如音频，视频，文字
	    private var incomingStream:NetStream;
	    
	    //用于尝试播放被呼叫者的身份信息流myStream发送的信息，被呼叫者在发送自己的身份信息流时会监听呼叫者对myStream的播放请求
	    private var controlStream:NetStream;
	    
	    //链接 adobe stratus 服务器
		private function init():void{
			var camera:Camera = Camera.getCamera();
			if(camera != null)
			{
				v1.attachCamera(camera);				
			}
		    else
		    {
		    	Alert.show("找不到摄像头");
		    }
			if(userName.text == "")
			{
				Alert.show("请输入任意用户名","错误")
				return
			}
			netConnection = new NetConnection();
			netConnection.addEventListener(NetStatusEvent.NET_STATUS, netConnectionHandler);//回调方法netConnectionHandler
			netConnection.connect(StratusAddress + "/" + DeveloperKey); //服务器地址里需要开发者Key
		}
		
		private function netConnectionHandler(e:NetStatusEvent):void{
			switch (e.info.code)
	        {
	        	//链接成功后的初始化
	            case "NetConnection.Connect.Success":
	                    info.text = "你好 "+userName.text+", 你已链接上Stratus服务器\n\n"
	                    //链接成功后这个唯一的表示当前flash player的netConnection.nearID被生成
	                    //我们靠这个ID与其他的flash player联系
	                    info.text += "你的PeerId是:\n"+netConnection.nearID+"\n对方可以用这个ID呼叫你\n\n" 
	                    //初始化登陆者
	                    initSendStream();
	                break;
	                
	            case "NetConnection.Connect.Closed":
	                break;
	                
	            case "NetStream.Connect.Success":
	                break;
	                
	            case "NetConnection.Connect.Failed":
	                 Alert.show("错误","错误")
	                break;
	                
	            case "NetStream.Connect.Closed":
	                break;
	        }
		}
		//连接成功后才调用
		private function initSendStream():void{
			
			//这三行表示我对外发布一个名称为netConnection.nearID的流，呼叫者通过我的nearID与我链接后，如果播放
			//这个名称为netConnection.nearID的流，会出发onPeerConnect事件，这样我就知道有人链接我
			myStream = new NetStream(netConnection, NetStream.DIRECT_CONNECTIONS);
			myStream.addEventListener(NetStatusEvent.NET_STATUS, netStreamHandler);//netStreamHandler回调
			myStream.publish(netConnection.nearID);//发布nearID
			
			//监听onPeerConnect事件
			var o:Object = new Object();
			o.onPeerConnect = function(subscriberStream:NetStream):Boolean
			{
				//当我收到呼叫者的链接请求后，尝试播放呼叫者的流名为"caller"的流，farID代表呼叫者的唯一ID，也就是前面提到的nearID
				//我通过farID找到呼叫者
			    incomingStream = new NetStream(netConnection,subscriberStream.farID);
	            incomingStream.addEventListener(NetStatusEvent.NET_STATUS, incomingStreamHandler);
	            incomingStream.play("caller");//播放此流
	            incomingStream.receiveAudio(true);//起动视频
            	incomingStream.receiveVideo(true);//起动音频
            	
            	var remoteVideo:Video = new Video();
           		remoteVideo.width = 320;
           		remoteVideo.height = 240;
           		remoteVideo.attachNetStream(incomingStream);
           		var videoContainer:UIComponent = new UIComponent();
           		videoContainer.addChild(remoteVideo);
           		p1.addChild(videoContainer);
           		//this.addChild(videoContainer);
            	
	            //监听onIm事件，用于收取文字信息
	            var i:Object = new Object;
	            i.onIm = function(name:String, value:String):void
	            {
	                info.text += name + ": " + value + "\n";//打印信息
	            }
	            //监听onIncomingCall事件，用于确定链接成功
	            i.onIncomingCall = function(name:String):void
	            {
	            	//显示链接成功后，对呼叫者发布我的信息流，名称为callee
	                info.text += name + " 已经与你链接\n";
	                outgoingStream = new NetStream(netConnection, NetStream.DIRECT_CONNECTIONS);
			        outgoingStream.addEventListener(NetStatusEvent.NET_STATUS, outgoingStreamHandler);
			        outgoingStream.publish("callee");//发部
			        outgoingStream.attachCamera(Camera.getCamera());
        	        outgoingStream.attachAudio(Microphone.getMicrophone());
			        outgoingStream.send("onConnectSuccess",userName.text);//发送
			        
	            }
	            incomingStream.client = i;//将onIncomingCall委托给 incomingStream流
	            
	            return true;
			}
			
			myStream.client = o; 
		}
		
		//呼叫别人时回调
		private function netStreamHandler(e:NetStatusEvent):void{
			
		}
		//连接成功之后向呼叫者发送自己的信息时发生的事件
		private function outgoingStreamHandler(e:NetStatusEvent):void{
			if (e.info.code == "NetStream.Play.Start" )
	        {
	            outgoingStream.send("onIncomingCall",userName.text)
	        }
		}
		//事件回调有新的人发出请求时
		private function incomingStreamHandler(e:NetStatusEvent):void{
	
		}
		
		//呼叫对方的方法，现在是呼叫者角色
		private function call():void{
			
			//通过对方的peerId链接被呼叫者，播放对方的身份信息流
			controlStream = new NetStream(netConnection,peerId.text);
			controlStream.addEventListener(NetStatusEvent.NET_STATUS, netStreamHandler);
			controlStream.play(peerId.text);
			
			//同时对外发布呼叫者的信息流
			outgoingStream = new NetStream(netConnection, NetStream.DIRECT_CONNECTIONS);
	        outgoingStream.addEventListener(NetStatusEvent.NET_STATUS, outgoingStreamHandler);
	        
	        outgoingStream.publish("caller");
	        outgoingStream.attachCamera(Camera.getCamera());
        	outgoingStream.attachAudio(Microphone.getMicrophone())
        
	        //尝试播放被呼叫者的信息流
	        incomingStream = new NetStream(netConnection, peerId.text);
	        incomingStream.addEventListener(NetStatusEvent.NET_STATUS, incomingStreamHandler);
	        incomingStream.play("callee");
	        info.text += "正在呼叫，请稍候...... \n\n"
	        
	        //监听信息发布事件
	        var i:Object = new Object;
	        i.onIm = function(name:String, value:String):void
	        {
	            info.text += name + ": " + value + "\n";
	        }
	        //监听onConnectSuccess事件，确定链接成功
	         i.onConnectSuccess = function(name:String):void
	        {
	            info.text += "与"+name + "链接成功\n";
	        } 
	        incomingStream.client = i
		}
		//用outgoingStream对外发布信息流
		private function send():void{
		   info.text += userName.text + ": " + message.text + "\n";
		   outgoingStream.send("onIm",userName.text,message.text);
	}
	
	]]>
</mx:Script>
<mx:Panel layout="vertical" paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5" title="Adobe Flex 迷你教程 -- P2P网络电话">

<mx:HBox width="100%">
    <mx:Label width="50" text="用户名:" />
	<mx:TextInput width="200" id="userName" />
	<mx:Button label="链接" click = "init()" />
</mx:HBox>
<mx:HBox width="100%">
	<mx:Label width="50" text="呼叫:" />
	<mx:TextInput id="peerId" width="300" />
	<mx:Button id="callYou" label="呼叫" click = "call()" />
</mx:HBox>
<mx:HBox width="100%">
	<mx:Label width="50" text="信息" />
	<mx:TextInput id="message" width="200" />
    <mx:Button label="发送"  click = "send()" />
</mx:HBox>
	<mx:HDividedBox width="100%" height="130">
		<mx:VideoDisplay width="338" height="128" id="v1"/>
	</mx:HDividedBox>
	<mx:Panel width="460" height="132" layout="absolute" id="p1">
	</mx:Panel>
<mx:TextArea id="info" width="464" height="162" />
	
</mx:Panel>
</mx:Application>
